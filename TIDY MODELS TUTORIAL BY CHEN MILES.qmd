---
title: "TIDY MODELS TUTORIAL"
editor: visual
editor_options: 
  chunk_output_type: console
---


```{r}

library(tidymodels)
library(tidyverse)
tidymodels_prefer()
theme_set(theme_bw())
 ames <- ames
set.seed(502)
```

### Split your data into training and testing sets

```{r}
ames <- ames  %>% 
  mutate(Sale_Price =log(Sale_Price))

ames_split <- initial_split(ames,prop = 0.8)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)

class(ames$Sale_Price)

```

### create model object

```{r}
lm_model <- linear_reg() %>% set_engine("lm")



```

### fit the model

```{r}

lm_form_fit <- lm_model %>%  
  fit(Sale_Price ~ Latitude + Longitude,data = ames_train)


```

## fitting the model with `fit_xy()`

```{r}
x <- ames_train %>% select(Latitude,Longitude)
y <- ames_train %>% pull(Sale_Price)
lm_xy_fit <- lm_model %>% 
  fit_xy(
    x= x,
    y = y
  )

```

```{r}
lm_xy_fit <- lm_model %>% 
  fit_xy(
    x = ames_train %>% select(Latitude,Longitude),
    y =ames_train %>% pull(Sale_Price)
  )


```

```{r}
lm_form_fit
lm_xy_fit

lm_form_fit %>% extract_fit_engine() %>% summary() %>% coef() 

lm_form_fit %>% tidy()

```

### Make Predictions

```{r}
ames_test_small <- ames_test %>% slice(1:5)

predict(lm_form_fit,new_data = ames_test_small) 

```

### combine tibbles

```{r}
ames_test_small %>% select(Sale_Price) %>% 
  bind_cols(predict(lm_form_fit,new_data = ames_test_small)) %>% 
  ## add 95% confidence interval to the results
  bind_cols(predict(lm_form_fit,new_data = ames_test_small, type= "pred_int"))

```

### decision tree models

```{r}
## create model object
tree_model <- decision_tree(min_n = 2) %>% 
  set_engine("rpart") %>% 
  set_mode("regression")

## fit model
tree_fit <- tree_model %>% 
  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)
  
## make predictions
ames_test_small %>% 
  select(Sale_Price) %>% 
  bind_cols(predict(tree_fit,ames_test_small))



```

```{r}

# parsnip_addin()
```


### Workflows

```{r}
lm_workflow <- workflow() %>% 
  add_model(lm_model)
## if our model is very simple,a standard R formula can be used as a preprocessor
lm_workflow <- lm_workflow %>% 
  add_formula(Sale_Price ~ Longitude + Latitude)

lm_workflow

```

### fitting workflow to data
```{r}
lm_fit <- fit(lm_workflow,ames_train)
lm_fit



```

### using workflow for prediction
```{r}
predict(lm_fit,ames_test_small)

```

Instead of using a formula,u can add variables to the workflow

```{r}
lm_workflow <- lm_workflow %>% 
  remove_formula() %>% 
  add_variables(
    outcomes = Sale_Price,
    predictors = c(Latitude,Longitude)
    
  )

lm_workflow

```

There is a convenience function called `last_fit()` that will fit the model to the entire training set and evaluate it with the testing set.
For `last_fit()` you pass a workflow and a split object
```{r}
final_lm_res <- last_fit(lm_workflow,ames_split)

final_lm_res %>% pull(.metrics)

final_lm_res %>% pull(.predictions)


```

## Feature Engineering With Recipes

### Formula with base R
```{r}
lm_fit_base <- ames_train %>% 
  lm(Sale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Year_Built + Bldg_Type, data = .)

summary(lm_fit_base) %>% tidy()
summary(lm_fit_base)

```


### A simple recipe

```{r}
simple_res <- ames_train %>% 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,data = .) %>% 
  step_log(Gr_Liv_Area,base = 10) %>% 
  step_dummy(all_nominal_predictors())

simple_res


```

We can add recipe objects to workflow objects.
If a formula (which serves as a preprocessor) already exists,you must remove it before starting a new recipe.

```{r}
lm_workflow <- 
  lm_workflow %>% 
  remove_variables() %>% 
  add_recipe(simple_res)

lm_workflow

```

#### calling fit()
```{r}
lm_fit <- fit(lm_workflow,ames_train)
predict(lm_fit, ames_test_small)

```

### Interaction Terms
Always make dummy variables first before adding interaction points 
```{r}
 simple_res <- ames_train %>% 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,data = .) %>% 
  step_log(Gr_Liv_Area,base = 10) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_"))



```


### Spline Terms
```{r}
simple_res <- ames_train %>% 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,data = .) %>% 
  step_log(Gr_Liv_Area,base = 10) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>% 
  step_ns(Latitude, deg_free = 20) # natural spline

lm_fit <- fit(lm_workflow,ames_train)
predict(lm_fit, ames_test_small)


```





























































































































































