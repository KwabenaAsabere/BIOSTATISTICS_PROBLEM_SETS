set.seed(502)
ames_split <- initial_split(ames,prop = 0.8)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
set.seed(502)
ames_split <- initial_split(ames,prop = 0.8,strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors()) %>%  # estimate the means and standard deviation
prep(training = ames_train, retain = TRUE)
norm_recipe
ames_rec <- #ames %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>%
step_ns(Latitude,Longitude,deg_free = 20) #ns = natural spline
set.seed(1001)
ames_fold <- vfold_cv(ames_train, v= 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
ames_fold
lm_model <- linear_reg() %>% set_engine("lm")
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model,
)
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
ames_rec <- #ames %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>%
step_ns(Latitude,Longitude,deg_free = 20) #ns = natural spline
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
set.seed(1001)
ames_fold <- vfold_cv(ames_train, v= 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
ames_fold
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors()) #%>%
# estimate the means and standard deviation
#prep(training = ames_train, retain = TRUE)
norm_recipe
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors()) %>%
# estimate the means and standard deviation
prep(training = ames_train, retain = TRUE)
norm_recipe
# Chunk 1
library(tidymodels)
library(tidyverse)
tidymodels_prefer()
theme_set(theme_bw())
ames <- ames
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# Chunk 2
set.seed(502)
ames_split <- initial_split(ames,prop = 0.8,strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
# Chunk 3
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors()) %>%
# estimate the means and standard deviation
prep(training = ames_train, retain = TRUE)
norm_recipe
# Chunk 4
ames_rec <- #ames %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>%
step_ns(Latitude,Longitude,deg_free = 20) #ns = natural spline
# Chunk 5
set.seed(1001)
ames_fold <- vfold_cv(ames_train, v= 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
ames_fold
# Chunk 6
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
# Chunk 7
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
# Chunk 1
library(tidymodels)
library(tidyverse)
tidymodels_prefer()
theme_set(theme_bw())
ames <- ames
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# Chunk 2
set.seed(502)
ames_split <- initial_split(ames,prop = 0.8,strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
# Chunk 3
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors()) %>%
# estimate the means and standard deviation
prep(training = ames_train, retain = TRUE)
norm_recipe
# Chunk 4
ames_rec <- #ames %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>%
step_ns(Latitude,Longitude,deg_free = 20) #ns = natural spline
# Chunk 5
set.seed(1001)
ames_fold <- vfold_cv(ames_train, v= 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
ames_fold
# Chunk 6
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
# Chunk 7
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
# Chunk 1
library(tidymodels)
library(tidyverse)
tidymodels_prefer()
theme_set(theme_bw())
ames <- ames
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# Chunk 2
set.seed(502)
ames_split <- initial_split(ames,prop = 0.8,strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
# Chunk 3
norm_recipe <- #ames_train %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# estimate the means and standard deviation
#prep(training = ames_train, retain = TRUE)
norm_recipe
# Chunk 4
ames_rec <- #ames %>%
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area +Year_Built + Bldg_Type + Longitude +Latitude, data = ames_train) %>%
step_log(Gr_Liv_Area) %>%
step_other(Neighborhood,threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(~Gr_Liv_Area:starts_with("Bldg_Type_")) %>%
step_ns(Latitude,Longitude,deg_free = 20) #ns = natural spline
# Chunk 5
set.seed(1001)
ames_fold <- vfold_cv(ames_train, v= 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
ames_fold
# Chunk 6
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm_rec =norm_recipe,
ames = ames_rec)
# Chunk 7
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
glmnet_models
glmnet_models <- glmnet_models %>%
workflow_map("fit_resamples",
# options to `workflow_map`:
seed = 1101, verbose = TRUE,
# options to `fit_resamples()`:
resamples = ames_fold, keep_pred
)
glmnet_models <- glmnet_models %>%
workflow_map("fit_resamples",
# options to `workflow_map`:
seed = 1101, verbose = TRUE,
# options to `fit_resamples()`:
resamples = ames_fold, keep_pred
)
glmnet_models <- glmnet_models %>%
workflow_map("fit_resamples",
# options to `workflow_map`:
seed = 1101, verbose = TRUE,
# options to `fit_resamples()`:
resamples = ames_fold, control= keep_pred
)
collect_metrics(glmnet_models) %>%
filter(.metric =="rmse")
model_list <- list(
lm = lm_model,
lasso_model,
ridge_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
lm_model <- linear_reg() %>% set_engine("lm")
lasso_model <- linear_reg(penalty = 0.001,mixture = 1) %>% set_engine("glmnet")
ridge_model <- linear_reg(penalty = 0.001,mixture = 0) %>% set_engine("glmnet")
glmnet00001_model <- linear_reg(penalty = 0.00001,mixture = 0.5) %>% set_engine("glmnet")
glmnet0001_model <- linear_reg(penalty = 0.0001,mixture = 0.5) %>% set_engine("glmnet")
glmnet001_model <- linear_reg(penalty = 0.001,mixture = 0.5) %>% set_engine("glmnet")
glmnet005_model <- linear_reg(penalty = 0.05,mixture = 0.5) %>% set_engine("glmnet")
glmnet01_model <- linear_reg(penalty = 0.01,mixture = 0.5) %>% set_engine("glmnet")
glmnet02_model <- linear_reg(penalty = 0.02,mixture = 0.5) %>% set_engine("glmnet")
model_list <- list(
lm = lm_model,
lasso_model,
ridge_model,
glm00001 = glmnet00001_model,
glm0001 = glmnet0001_model,
glm001 = glmnet001_model,
glm005 = glmnet005_model,
glm01 = glmnet01_model,
glm02 = glmnet02_model
)
preproc <- list(norm =norm_recipe,
ames = ames_rec)
glmnet_models <- workflow_set(
preproc = preproc,
models = model_list,
cross = TRUE
)
glmnet_models
glmnet_models <- glmnet_models %>%
workflow_map("fit_resamples",
# options to `workflow_map`:
seed = 1101, verbose = TRUE,
# options to `fit_resamples()`:
resamples = ames_fold, control= keep_pred
)
collect_metrics(glmnet_models) %>%
filter(.metric =="rmse")
autoplot(glmnet_models)
library(tidyverse)
iris = read_csv("C:\Users\KAsab\Downloads\Iris.csv")
iris = read_csv(r"C:\Users\KAsab\Downloads\Iris.csv")
iris = read_csv("C:\Users\KAsab\Downloads\Iris.csv")
url = "C:\Users\KAsab\Downloads\Iris.csv"
iris = read_csv(url)
iris = read.csv(url)
iris = read_csv(url)
iris = read_csv("Iris.csv")
url = "C:/Users/KAsab/Downloads/Iris.csv"
iris = read_csv(url)
heart = read_csv("Framingham.csv")
heart %>% head(10)
str(heart)
heart %>% isna()
heart %>% is.na(everything())
heart %>% is.na(heartRate)
heart %>% is.na("heartRate")
heart %>% head(10)
heart %>% distinct(education)
View(heart)
heart %>% select("age","totChol":"glucose")
heart %>% select("age","totChol":"glucose") %>%
summarise(mean = mean(na.rm = TRUE),
std = std(na.rm = TRUE),
min = min(na.rm = TRUE),
max = max(na.rm = TRUE)
)
heart %>% select("age","totChol":"glucose") %>%
summarise(mean = mean(.x,na.rm = TRUE),
std = std(.x,na.rm = TRUE),
min = min(.x,na.rm = TRUE),
max = max(.x,na.rm = TRUE)
)
library(tidyverse)
class621 <- read_csv("2019class621label.csv")
head(class621)
