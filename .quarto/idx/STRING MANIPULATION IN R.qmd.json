{"title":"STRING MANIPULATION IN R","markdown":{"yaml":{"title":"STRING MANIPULATION IN R","editor":"visual","editor_options":{"chunk_output_type":"console"}},"headingText":"Matching Strings","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(tidyverse)\nlibrary(skimr)\n```\n\n```{r}\nswiftSongs <- read_csv(\"swiftSongsFull.csv\")\ntaylorswift <- read_csv(\"https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/swiftSongs.csv\")\n\n```\n\n```{r}\nswiftSongs <- swiftSongs %>% \n  select(track_name,youtube_title,youtube_duration,full_lyrics)\n\nglimpse(swiftSongs)\nskim(swiftSongs)\n\n```\n\n\n```{r}\n# Displaying lyrics\nswiftSongs %>% filter(track_name == \"It’s Nice To Have A Friend\") %>% \n  pull(full_lyrics)\n\n## Detecting if a string contains the sub_string \"Taylor\"\nstr_detect(string = c(\"Taylor Swift\", \"Taylor Lautner\", \"Harry Styles\"),\n           pattern = \"Taylor\")\n\n```\n\n```{r}\nswiftSongs <- swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight\"))\n## How many of Taylor's songs mention the word midnight\nswiftSongs %>% \n  pull(contains_midnight) %>% sum()\n\n swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight|Midnight\")) %>% \n   pull(contains_midnight) %>% \n   sum()\n\n\n```\n\n```{r}\n## The str_count() function is useful for tallying the number of times a pattern occurs in a string\nswiftSongs %>% filter(track_name == \"The Man\") %>% \n  pull(full_lyrics)\n\n\nstr_count(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\")\n\n```\n\n```{r}\n## counting the number of times Taylor mentions love in her songs\n\nswiftSongs <- swiftSongs %>% \n  mutate(love_count = str_count(full_lyrics,pattern = \"love\"))\n\n## which song mentions love the most times and how many times is it mentioned\nswiftSongs %>% \n  slice_max(love_count, n= 1) %>% \n  select(track_name,love_count)\n\n\n\n```\n\n### Modifying Strings\n\n```{r}\n## the str_c function concatenates or combine multiple strings together\n\n## concatenating two strings\nstr_c(\"...Are you \", \"ready for it?\")\n\n```\n\nOne of the most common string operations that is needed when cleaning data is to extract substrings.This can be achieved using the str_sub() function\n\n```{r}\n## positive indices start from the beginning of the string\nstr_sub(string = \"Eras Tour\", start = 1, end = 3)\n\n## Negative indices start from thened of the string\nstr_sub(string = \"Eras Tour\", start = -4, end = -1)\n\n```\n\nAnother common operation is to replace a particular pateern in strings.We can use the str_replace_all() function to replace certain patterns with a replacement of our choice\n\n```{r}\nstr_replace_all(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\", replacement = \"!!!\")\n```\n\n```{r}\n## create a newvariable called youtube_time that is the same as youtube_duration , but with\n## a symbol : replacing the M\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"))\n\n## Modify youtube time by removing the P,T & S\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"),\n         youtube_time = str_remove_all(youtube_time, pattern = \"PT|S\"))\n\n\n## Modify youtube_time to add trailing 0s when needed using the case_when() function\n## together with str_replace_all and str_length()\n\nswiftSongs <- swiftSongs %>% \n  mutate(youtube_time = \n           case_when(str_length(youtube_time)== 2 ~ str_c(youtube_time,\"00\"),\n                     str_length(youtube_time)== 3 ~ str_replace_all(youtube_time,\n                                                                    pattern = \":\",\n                                                                    replacement = \":0\"),\n                   TRUE ~ youtube_time  ))\n\n\n```\n\n\n\n### Capitalization and Spacing\n\n```{r}\n# str_to_lower() converts strings to all upper case\n# str_to_upper() converts all strings to upper case\n# str_to_title() converts the first character of each word to upper case\n## str_to_sentence( capitalizes only the forst letter of the first word)\n\nstr_to_lower(\"It's nice to have a friend\")\nstr_to_upper(\"It's nice to have a friend\")\nstr_to_title(\"It's nice to have a friend\")\nstr_to_sentence(\"It's nice to have a friend\")\n\n\n```\n\n\nTo assist with cleaning up issues with spaces *stringr* provides us with other helpful functions as well:\n1) str_trim() : Removes trailing and leading white space in a string\n2) str_squish() : Removes trailing and leading white space in string and collapsed multiple consecutive spaces inside of string to a single space.\n\n```{r}\n## Removing spaces at the start and end of string\nstr_trim(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n\n## Removing spaces at the start and end of string and repetitive spaces\nstr_squish(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\nlibrary(tidyverse)\nlibrary(skimr)\n```\n\n```{r}\nswiftSongs <- read_csv(\"swiftSongsFull.csv\")\ntaylorswift <- read_csv(\"https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/swiftSongs.csv\")\n\n```\n\n```{r}\nswiftSongs <- swiftSongs %>% \n  select(track_name,youtube_title,youtube_duration,full_lyrics)\n\nglimpse(swiftSongs)\nskim(swiftSongs)\n\n```\n\n### Matching Strings\n\n```{r}\n# Displaying lyrics\nswiftSongs %>% filter(track_name == \"It’s Nice To Have A Friend\") %>% \n  pull(full_lyrics)\n\n## Detecting if a string contains the sub_string \"Taylor\"\nstr_detect(string = c(\"Taylor Swift\", \"Taylor Lautner\", \"Harry Styles\"),\n           pattern = \"Taylor\")\n\n```\n\n```{r}\nswiftSongs <- swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight\"))\n## How many of Taylor's songs mention the word midnight\nswiftSongs %>% \n  pull(contains_midnight) %>% sum()\n\n swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight|Midnight\")) %>% \n   pull(contains_midnight) %>% \n   sum()\n\n\n```\n\n```{r}\n## The str_count() function is useful for tallying the number of times a pattern occurs in a string\nswiftSongs %>% filter(track_name == \"The Man\") %>% \n  pull(full_lyrics)\n\n\nstr_count(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\")\n\n```\n\n```{r}\n## counting the number of times Taylor mentions love in her songs\n\nswiftSongs <- swiftSongs %>% \n  mutate(love_count = str_count(full_lyrics,pattern = \"love\"))\n\n## which song mentions love the most times and how many times is it mentioned\nswiftSongs %>% \n  slice_max(love_count, n= 1) %>% \n  select(track_name,love_count)\n\n\n\n```\n\n### Modifying Strings\n\n```{r}\n## the str_c function concatenates or combine multiple strings together\n\n## concatenating two strings\nstr_c(\"...Are you \", \"ready for it?\")\n\n```\n\nOne of the most common string operations that is needed when cleaning data is to extract substrings.This can be achieved using the str_sub() function\n\n```{r}\n## positive indices start from the beginning of the string\nstr_sub(string = \"Eras Tour\", start = 1, end = 3)\n\n## Negative indices start from thened of the string\nstr_sub(string = \"Eras Tour\", start = -4, end = -1)\n\n```\n\nAnother common operation is to replace a particular pateern in strings.We can use the str_replace_all() function to replace certain patterns with a replacement of our choice\n\n```{r}\nstr_replace_all(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\", replacement = \"!!!\")\n```\n\n```{r}\n## create a newvariable called youtube_time that is the same as youtube_duration , but with\n## a symbol : replacing the M\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"))\n\n## Modify youtube time by removing the P,T & S\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"),\n         youtube_time = str_remove_all(youtube_time, pattern = \"PT|S\"))\n\n\n## Modify youtube_time to add trailing 0s when needed using the case_when() function\n## together with str_replace_all and str_length()\n\nswiftSongs <- swiftSongs %>% \n  mutate(youtube_time = \n           case_when(str_length(youtube_time)== 2 ~ str_c(youtube_time,\"00\"),\n                     str_length(youtube_time)== 3 ~ str_replace_all(youtube_time,\n                                                                    pattern = \":\",\n                                                                    replacement = \":0\"),\n                   TRUE ~ youtube_time  ))\n\n\n```\n\n\n\n### Capitalization and Spacing\n\n```{r}\n# str_to_lower() converts strings to all upper case\n# str_to_upper() converts all strings to upper case\n# str_to_title() converts the first character of each word to upper case\n## str_to_sentence( capitalizes only the forst letter of the first word)\n\nstr_to_lower(\"It's nice to have a friend\")\nstr_to_upper(\"It's nice to have a friend\")\nstr_to_title(\"It's nice to have a friend\")\nstr_to_sentence(\"It's nice to have a friend\")\n\n\n```\n\n\nTo assist with cleaning up issues with spaces *stringr* provides us with other helpful functions as well:\n1) str_trim() : Removes trailing and leading white space in a string\n2) str_squish() : Removes trailing and leading white space in string and collapsed multiple consecutive spaces inside of string to a single space.\n\n```{r}\n## Removing spaces at the start and end of string\nstr_trim(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n\n## Removing spaces at the start and end of string and repetitive spaces\nstr_squish(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":5,"fig-format":"retina","fig-dpi":96,"fig-asp":0.618,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"line-breaks":"auto","engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"STRING MANIPULATION IN R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","editor_options":{"chunk_output_type":"console"},"title":"STRING MANIPULATION IN R","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}