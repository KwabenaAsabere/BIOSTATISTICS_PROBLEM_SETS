{
  "hash": "cb52d91bc6cf4e50002887bf5b580da1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"STRING MANIPULATION IN R\"\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(skimr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nswiftSongs <- read_csv(\"swiftSongsFull.csv\")\ntaylorswift <- read_csv(\"https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/swiftSongs.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nswiftSongs <- swiftSongs %>% \n  select(track_name,youtube_title,youtube_duration,full_lyrics)\n\nglimpse(swiftSongs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 4\n$ track_name       <chr> \"...Ready For It?\", \"‘tis the damn season\", \"august\",…\n$ youtube_title    <chr> \"Taylor Swift - …Ready For It?\", \"Taylor Swift - ‘tis…\n$ youtube_duration <chr> \"PT3M31S\", \"PT3M56S\", \"PT4M24S\", \"PT4M56S\", \"PT4M35S\"…\n$ full_lyrics      <chr> \"Knew he was a killer first time that I saw him Wonde…\n```\n\n\n:::\n\n```{.r .cell-code}\nskim(swiftSongs)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |swiftSongs |\n|Number of rows           |150        |\n|Number of columns        |4          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |4          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable    | n_missing| complete_rate| min|  max| empty| n_unique| whitespace|\n|:----------------|---------:|-------------:|---:|----:|-----:|--------:|----------:|\n|track_name       |         0|             1|   2|   70|     0|      150|          0|\n|youtube_title    |         0|             1|   5|   79|     0|      150|          0|\n|youtube_duration |         0|             1|   4|    7|     0|       92|          0|\n|full_lyrics      |         0|             1| 786| 3505|     0|      150|          0|\n\n\n:::\n:::\n\n\n### Matching Strings\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Displaying lyrics\nswiftSongs %>% filter(track_name == \"It’s Nice To Have A Friend\") %>% \n  pull(full_lyrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ooh Ooh School bell rings, walk me home Sidewalk chalk covered in snow Lost my gloves, you give me one \\\"Wanna hang out?\\\" Yeah, sounds like fun Video games, you pass me a note Sleeping in tents It's nice to have a friend (Ooh) It's nice to have a friend (Ooh) Light pink sky, up on the roof Sun sinks down, no curfew 20 questions, we tell the truth You've been stressed out lately, yeah, me too Something gave you the nerve To touch my hand It's nice to have a friend (Ooh) It's nice to have a friend (Ooh) Church bells ring, carry me home Rice on the ground looks like snow Call my bluff, call you \\\"Babe\\\" Have my back, yeah, every day Feels like home, stay in bed The whole weekend It's nice to have a friend (Ooh) It's nice to have a friend (Ooh) It's nice to have a friend (Ooh) (Ooh)\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Detecting if a string contains the sub_string \"Taylor\"\nstr_detect(string = c(\"Taylor Swift\", \"Taylor Lautner\", \"Harry Styles\"),\n           pattern = \"Taylor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nswiftSongs <- swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight\"))\n## How many of Taylor's songs mention the word midnight\nswiftSongs %>% \n  pull(contains_midnight) %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\n swiftSongs %>% \n  mutate(contains_midnight = str_detect(full_lyrics,  pattern = \"midnight|Midnight\")) %>% \n   pull(contains_midnight) %>% \n   sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## The str_count() function is useful for tallying the number of times a pattern occurs in a string\n\n\nstr_count(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## counting the number of times Taylor mentions love in her songs\n\nswiftSongs <- swiftSongs %>% \n  mutate(love_count = str_count(full_lyrics,pattern = \"love\"))\n\n## which song mentions love the most times and how many times is it mentioned\nswiftSongs %>% \n  slice_max(love_count, n= 1) %>% \n  select(track_name,love_count)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|track_name | love_count|\n|:----------|----------:|\n|This Love  |         52|\n\n</div>\n:::\n:::\n\n\n### Modifying Strings\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## the str_c function concatenates or combine multiple strings together\n\n## concatenating two strings\nstr_c(\"...Are you \", \"ready for it?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"...Are you ready for it?\"\n```\n\n\n:::\n:::\n\n\nOne of the most common string operations that is needed when cleaning data is to extract substrings.This can be achieved using the str_sub() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## positive indices start from the beginning of the string\nstr_sub(string = \"Eras Tour\", start = 1, end = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Era\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Negative indices start from thened of the string\nstr_sub(string = \"Eras Tour\", start = -4, end = -1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tour\"\n```\n\n\n:::\n:::\n\n\nAnother common operation is to replace a particular pattern in strings.We can use the str_replace_all() function to replace certain patterns with a replacement of our choice\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(\"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a man And I'm so sick of them coming at me again 'Cause if I was a man, then I'd be the man I’d be the man I'd be the man\",\n          pattern = \"man\", replacement = \"!!!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I'm so sick of running as fast as I can Wondering if I’d get there quicker if I was a !!! And I'm so sick of them coming at me again 'Cause if I was a !!!, then I'd be the !!! I’d be the !!! I'd be the !!!\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## create a newvariable called youtube_time that is the same as youtube_duration , but with\n## a symbol : replacing the M\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"))\n\n## Modify youtube time by removing the P,T & S\n\nswiftSongs <-  swiftSongs %>% \n  mutate(youtube_time = str_replace_all(youtube_duration, pattern = \"M\",replacement = \":\"),\n         youtube_time = str_remove_all(youtube_time, pattern = \"PT|S\"))\n\n\n## Modify youtube_time to add trailing 0s when needed using the case_when() function\n## together with str_replace_all and str_length()\n\nswiftSongs <- swiftSongs %>% \n  mutate(youtube_time = \n           case_when(str_length(youtube_time)== 2 ~ str_c(youtube_time,\"00\"),\n                     str_length(youtube_time)== 3 ~ str_replace_all(youtube_time,\n                                                                    pattern = \":\",\n                                                                    replacement = \":0\"),\n                   TRUE ~ youtube_time  ))\n```\n:::\n\n\n### Capitalization and Spacing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str_to_lower() converts strings to all upper case\n# str_to_upper() converts all strings to upper case\n# str_to_title() converts the first character of each word to upper case\n## str_to_sentence( capitalizes only the forst letter of the first word)\n\nstr_to_lower(\"It's nice to have a friend\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"it's nice to have a friend\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_upper(\"It's nice to have a friend\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"IT'S NICE TO HAVE A FRIEND\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_title(\"It's nice to have a friend\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"It's Nice To Have A Friend\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_sentence(\"It's nice to have a friend\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"It's nice to have a friend\"\n```\n\n\n:::\n:::\n\n\nTo assist with cleaning up issues with spaces *stringr* provides us with other helpful functions as well:\n\n-   ***str_trim()*** : Removes trailing and leading white space in a string\n-   ***str_squish()*** : Removes trailing and leading white space in string and collapsed multiple consecutive spaces inside of string to a single space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Removing spaces at the start and end of string\nstr_trim(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Removing spaces at the start and end of string and repetitive spaces\nstr_squish(\" Best believe I'm still bejeweled   When I walk in the room  I can still make the whole place shimer \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Best believe I'm still bejeweled When I walk in the room I can still make the whole place shimer\"\n```\n\n\n:::\n:::\n\n\n### More practice ideas on string manipulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaylorswift <-taylorswift %>% \n  mutate(lyrics = str_to_lower(full_lyrics)) \n\ntaylorswift %>% \n  pull(lyrics) %>% \n  str_detect(pattern = \"midnight\") %>% \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n### Regular Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit <- c(\"Apple\",\"Strawberry\",\"Banana\",\"Pear\",\"Blackberry\",\"*berry\")\nstr_view(fruit,pattern = \"an\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3] │ B<an><an>a\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view_all(fruit,pattern = \"an\",html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-d733fde7ec8e4cc31ca7\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d733fde7ec8e4cc31ca7\">{\"x\":{\"html\":\"<ul>\\n  <li><pre>Apple<\\/pre><\\/li>\\n  <li><pre>Strawberry<\\/pre><\\/li>\\n  <li><pre>B<span class='match'>an<\\/span><span class='match'>an<\\/span>a<\\/pre><\\/li>\\n  <li><pre>Pear<\\/pre><\\/li>\\n  <li><pre>Blackberry<\\/pre><\\/li>\\n  <li><pre>*berry<\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit,\"\\\\wberry\", html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-35beaec517cba7157441\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-35beaec517cba7157441\">{\"x\":{\"html\":\"<ul>\\n  <li><pre>Stra<span class='match'>wberry<\\/span><\\/pre><\\/li>\\n  <li><pre>Blac<span class='match'>kberry<\\/span><\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"[:alpha:]berry\", html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-3f2989113c0e2e99f50c\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3f2989113c0e2e99f50c\">{\"x\":{\"html\":\"<ul>\\n  <li><pre>Stra<span class='match'>wberry<\\/span><\\/pre><\\/li>\\n  <li><pre>Blac<span class='match'>kberry<\\/span><\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"\\\\*berry\", html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-3e5450dbb02109f179e6\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3e5450dbb02109f179e6\">{\"x\":{\"html\":\"<ul>\\n  <li><pre><span class='match'>*berry<\\/span><\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"\\\\*berry\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[6] │ <*berry>\n```\n\n\n:::\n:::\n\n\n### anchoring\n\nbeginning : \\^ end: \\$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"^B\")  # starts with B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3] │ <B>anana\n[5] │ <B>lackberry\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit,\"y$\")  # ends with y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ Strawberr<y>\n[5] │ Blackberr<y>\n[6] │ *berr<y>\n```\n\n\n:::\n\n```{.r .cell-code}\n## replace all four letter words that begin with \"a\" with \"foo\"\n## in programming foo is a placeholder for any function\n## \".\" (period) is a placeholder for any character\n\nx <- c(\"apple\", \"barn\", \"ape\", \"cart\", \"alas\", \"pain\", \"ally\")\nstr_replace(x, pattern = \"^a...$\", replacement = \"foo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"apple\" \"barn\"  \"ape\"   \"cart\"  \"foo\"   \"pain\"  \"foo\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(x, pattern = \"^a...$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[5] │ <alas>\n[7] │ <ally>\n```\n\n\n:::\n:::\n\n\n### Special Characters\n\n\\n  new line \\s or \\[:space:\\] any whitespace \\d or \\[:digit:\\] any digit \\w [[:alpha:]  any word or character \\[:punct:\\] any punctuation . every character except new line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphones <- c(\"Abba: 555-1234\", \"Anna: 555-0987\", \"Andy: 555-7654\")\n\n#  \\d <- digits\n\nstr_view(phones, pattern = \"\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Abba: <555-1234>\n[2] │ Anna: <555-0987>\n[3] │ Andy: <555-7654>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, pattern = \"\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d\", html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-1d344de564d4b5136ba0\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1d344de564d4b5136ba0\">{\"x\":{\"html\":\"<ul>\\n  <li><pre>Abba: <span class='match'>555-1234<\\/span><\\/pre><\\/li>\\n  <li><pre>Anna: <span class='match'>555-0987<\\/span><\\/pre><\\/li>\\n  <li><pre>Andy: <span class='match'>555-7654<\\/span><\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\n# \\s [:space:] <- whitespace\n\nstr_view(phones, pattern = \"\\\\s\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Abba:< >555-1234\n[2] │ Anna:< >555-0987\n[3] │ Andy:< >555-7654\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, pattern = \"\\\\s\",html = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"str_view html-widget html-fill-item\" id=\"htmlwidget-de183fa260dd067019a3\" style=\"width:960px;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-de183fa260dd067019a3\">{\"x\":{\"html\":\"<ul>\\n  <li><pre>Abba:<span class='match'> <\\/span>555-1234<\\/pre><\\/li>\\n  <li><pre>Anna:<span class='match'> <\\/span>555-0987<\\/pre><\\/li>\\n  <li><pre>Andy:<span class='match'> <\\/span>555-7654<\\/pre><\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n### Alternates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(phones, \"A..a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <Abba>: 555-1234\n[2] │ <Anna>: 555-0987\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"A[bn][bn]a\") # any character in the squared bracket is valid\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <Abba>: 555-1234\n[2] │ <Anna>: 555-0987\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"A[^b]\") # ^ means not\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <An>na: 555-0987\n[3] │ <An>dy: 555-7654\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"An(na|dy)\")  # using () means it can be just one or the other not both\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <Anna>: 555-0987\n[3] │ <Andy>: 555-7654\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"(?i)an(na|dy)\")  # (?i <- ignore case)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <Anna>: 555-0987\n[3] │ <Andy>: 555-7654\n```\n\n\n:::\n:::\n\n\n### quantifiers\n\n?, 0 or 1 time +, 1 or more times \\*, 0 or more times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(phones, \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Abba: <555>-<1234>\n[2] │ Anna: <555>-<0987>\n[3] │ Andy: <555>-<7654>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"\\\\d?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <>A<>b<>b<>a<>:<> <5><5><5><>-<1><2><3><4><>\n[2] │ <>A<>n<>n<>a<>:<> <5><5><5><>-<0><9><8><7><>\n[3] │ <>A<>n<>d<>y<>:<> <5><5><5><>-<7><6><5><4><>\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- c(\"A\", \"AA\", \"AAA\",\"AAAA\", \"B\", \"BB\")\nstr_view(x, \"^A?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <A>\n[2] │ <A>A\n[3] │ <A>AA\n[4] │ <A>AAA\n[5] │ <>B\n[6] │ <>BB\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(x, \"^A+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <A>\n[2] │ <AA>\n[3] │ <AAA>\n[4] │ <AAAA>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(\"color and colour\", \"colou?r\") # match if it contains \"u\" 0 or 1 time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <color> and <colour>\n```\n\n\n:::\n:::\n\n\n{n} exactly n {n,} n or more {0,n} at most, n {n,m} between n & m times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(phones, \"\\\\d{3}-\\\\d{4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Abba: <555-1234>\n[2] │ Anna: <555-0987>\n[3] │ Andy: <555-7654>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(phones, \"\\\\d*-\\\\d*\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Abba: <555-1234>\n[2] │ Anna: <555-0987>\n[3] │ Andy: <555-7654>\n```\n\n\n:::\n:::\n\n\nregular expression are greedy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlove <- \"Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.\"\n\nstr_view(love, \"love.*\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Would I rather be feared or <loved? Easy. Both. I want people to be afraid of how much they love me.>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(love, \"love.?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Would I rather be feared or <loved>? Easy. Both. I want people to be afraid of how much they <love >me.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlove <- \"Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.\"\n\n## replace love or loved with X\n\nstr_replace_all(love, pattern = \"love[:alpha:]?\", replacement = \"X\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Would I rather be feared or X? Easy. Both. I want people to be afraid of how much they X me.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# replace strings with 3 consonants in a row at the start of a word\n\nx1 <- c(\"string\", \"priority\",\"value\", \"distinction\")\nstr_view(x1, \"^[^aeiou]{3,}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <str>ing\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"STRING MANIPULATION IN R_files/libs/htmltools-fill-0.5.8/fill.css\" rel=\"stylesheet\" />\n<script src=\"STRING MANIPULATION IN R_files/libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"STRING MANIPULATION IN R_files/libs/str_view-0.1.0/str_view.css\" rel=\"stylesheet\" />\n<script src=\"STRING MANIPULATION IN R_files/libs/str_view-binding-1.5.1/str_view.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}