{
  "hash": "ffb9d17f8407a2e949caed38014c6c9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CONTROL FLOW\"\nauthor: \"K.ASABERE\"\neditor: visual\ndate:  \"2024-06-25\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n### Single *if* without *else*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n\ngreet <- function(name,birthday = FALSE){\n  paste0(\n    \"Hi \", name,\n    if(birthday) \" and HAPPY BIRTHDAY\"\n  )\n}\n\ngreet(\"Maria\",FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hi Maria\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngreet(\"Jaime\",TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hi Jaime and HAPPY BIRTHDAY\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_lane_text <-  function(number){\n  paste0(\n    number,\n    \" lane\",\n    if (number >1)\"s\",\n    \" of sequencing\"\n  )\n}\n\nformat_lane_text(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1 lane of sequencing\"\n```\n\n\n:::\n\n```{.r .cell-code}\nformat_lane_text(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"4 lanes of sequencing\"\n```\n\n\n:::\n:::\n\n\n### Vectorized choices\n\n`ifelse()` is a vectorised version of `if`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n\nifelse(x %% 5 ==0, \"XXX\", as.character(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1\"   \"2\"   \"3\"   \"4\"   \"XXX\" \"6\"   \"7\"   \"8\"   \"9\"   \"XXX\"\n```\n\n\n:::\n\n```{.r .cell-code}\nifelse(x %% 2 == 0, \"even\", \"odd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\"\n```\n\n\n:::\n:::\n\n\nWhile `case_when` uses logical expressions on the left- hand side of the formula, `case_match` uses values to match against `.x` with.The following two statements are equivalent:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\",\"b\",\"a\",\"d\",\"b\",NA,\"c\",\"e\",\"f\",\"g\")\n\n\ncase_when(\n  x %in% c(\"a\", \"b\") ~ 1,\n  x %in% \"c\" ~ 2,\n  x %in% c(\"d\", \"e\") ~ 3,\n  .default = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   1   1   3   1 100   2   3 100 100\n```\n\n\n:::\n\n```{.r .cell-code}\ncase_match(\n  x,\n  c(\"a\", \"b\") ~ 1,\n  \"c\" ~ 2,\n  c(\"d\", \"e\") ~ 3,\n  .default = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   1   1   3   1 100   2   3 100 100\n```\n\n\n:::\n\n```{.r .cell-code}\ncase_match(x,\n           c(\"a\",\"b\",\"c\") ~ \"low\",\n           c(\"d\",\"e\") ~ \"high\",\n           .default = \"missing\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"low\"     \"low\"     \"low\"     \"high\"    \"low\"     \"missing\" \"low\"    \n [8] \"high\"    \"missing\" \"missing\"\n```\n\n\n:::\n:::\n\n\n### Loops\n\n-   Iteration over elements of a vector\n\n`for (item in vector) perform_action`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  print(1:i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 1 2\n[1] 1 2 3\n[1] 1 2 3 4\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- numeric(length = 5L)\ndf <- data.frame(x = 1:5)\n\nfor (i in 1:5){\n  df$y[[i]] <- i +1\n}\n\ndf\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  x|y  |\n|--:|:--|\n|  1|2  |\n|  2|3  |\n|  3|4  |\n|  4|5  |\n|  5|6  |\n\n</div>\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}